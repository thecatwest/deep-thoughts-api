{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\catwe\\\\Desktop\\\\projects\\\\deep-thoughts-app\\\\client\\\\src\\\\pages\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; // import useQuery Hook from Apollo Client to allow you to make requests to GraphQL server\n// allows you to make requests to GraphQL server you connected to and made available to the app using the <ApolloProvider> component in App.js\n\nimport { useQuery } from '@apollo/client'; // import QUERY_THOUGHTS query and use with imported Hook functionality to query the data\n\nimport { QUERY_THOUGHTS } from '../utils/queries'; // import ThoughtList component\n\nimport ThoughtList from '..';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  // use useQuery hook to make query request\n  // when you load Home component in app, you'll execute the query for thought data. This is async like fetch(), & Apollo's @apollo/client library provides a loading property to indicate the request isn't done yet\n  // when loading is finished and data is returned from server, that info is stored in the destructured data property\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_THOUGHTS); // use optional chainging to negate the need to check if an obj even exists before accessing its properties\n  // in this case, no data will exist until the query to the server is finished\n  // without the ?, you'll receive an error that says you can't access the property of data because it's undefined\n  // this says if data exists, store it in thoughts constant you just created. If data is undefined, save an empty array to thoughts component\n\n  const thoughts = (data === null || data === void 0 ? void 0 : data.thoughts) || [];\n  console.log(thoughts);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-row justify-space-between\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 mb-3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"HasvTXHwlBNedvPpf4Gl00Z2xbw=\", false, function () {\n  return [useQuery];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/catwe/Desktop/projects/deep-thoughts-app/client/src/pages/Home.js"],"names":["React","useQuery","QUERY_THOUGHTS","ThoughtList","Home","loading","data","thoughts","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,SAASC,QAAT,QAAyB,gBAAzB,C,CACA;;AACA,SAASC,cAAT,QAA+B,kBAA/B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,IAAxB;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB;AACA;AACA;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBL,QAAQ,CAACC,cAAD,CAAlC,CAJiB,CAMjB;AACA;AACA;AACA;;AACA,QAAMK,QAAQ,GAAG,CAAAD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,QAAN,KAAkB,EAAnC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CApBD;;GAAMH,I;UAIsBH,Q;;;KAJtBG,I;AAsBN,eAAeA,IAAf","sourcesContent":["import React from 'react';\n// import useQuery Hook from Apollo Client to allow you to make requests to GraphQL server\n// allows you to make requests to GraphQL server you connected to and made available to the app using the <ApolloProvider> component in App.js\nimport { useQuery } from '@apollo/client';\n// import QUERY_THOUGHTS query and use with imported Hook functionality to query the data\nimport { QUERY_THOUGHTS } from '../utils/queries';\n// import ThoughtList component\nimport ThoughtList from '..'\n\nconst Home = () => {\n  // use useQuery hook to make query request\n  // when you load Home component in app, you'll execute the query for thought data. This is async like fetch(), & Apollo's @apollo/client library provides a loading property to indicate the request isn't done yet\n  // when loading is finished and data is returned from server, that info is stored in the destructured data property\n  const { loading, data } = useQuery(QUERY_THOUGHTS);\n\n  // use optional chainging to negate the need to check if an obj even exists before accessing its properties\n  // in this case, no data will exist until the query to the server is finished\n  // without the ?, you'll receive an error that says you can't access the property of data because it's undefined\n  // this says if data exists, store it in thoughts constant you just created. If data is undefined, save an empty array to thoughts component\n  const thoughts = data?.thoughts || [];\n  console.log(thoughts);\n\n  return (\n    <main>\n      <div className='flex-row justify-space-between'>\n        <div className='col-12 mb-3'>{/* PRINT THOUGHT LIST */}</div>\n      </div>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}